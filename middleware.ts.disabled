import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { verifySession } from './src/lib/jwt'

const PROTECTED = ['/dashboard', '/account', '/admin']

export async function middleware(req: NextRequest) {
  // Skip middleware for API routes
  if (req.nextUrl.pathname.startsWith('/api/')) {
    return NextResponse.next()
  }
  
  if (!PROTECTED.some((p) => req.nextUrl.pathname.startsWith(p))) return NextResponse.next()
  const token = req.cookies.get(process.env.SESSION_COOKIE_NAME ?? 'session')?.value
  if (!token) {
    const url = new URL('/login', req.url)
    url.searchParams.set('next', req.nextUrl.pathname)
    return NextResponse.redirect(url)
  }

  // In production, verify token to ensure it's valid/unchanged
  if (process.env.NODE_ENV === 'production') {
    try {
      await verifySession(token)
    } catch (e) {
      const url = new URL('/login', req.url)
      url.searchParams.set('next', req.nextUrl.pathname)
      return NextResponse.redirect(url)
    }
  }

  return NextResponse.next()
}

export const config = { 
  matcher: [
    // Only run middleware on protected routes, explicitly exclude API
    '/dashboard/:path*',
    '/account/:path*', 
    '/admin/:path*'
  ] 
}
