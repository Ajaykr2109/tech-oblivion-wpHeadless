{"numFailedTestSuites":14,"numFailedTests":72,"numPassedTestSuites":2,"numPassedTests":105,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":10,"numTodoTests":0,"numTotalTestSuites":16,"numTotalTests":177,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1756661892822,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["components smoke"],"duration":82,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/admin/AdminDashboard.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/admin/AdminDashboard.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\admin\\BulkActionsBar.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/admin/BulkActionsBar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/admin/BulkActionsBar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":64,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\accordion.tsx:29:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\admin\\moderation\\ModerationPanel.tsx:16:20)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/admin/moderation/ModerationPanel.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/admin/moderation/ModerationPanel.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/admin/PageHeader.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/admin/PageHeader.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/admin/PostEditorPageClient.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/admin/PostEditorPageClient.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":17,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\checkbox.tsx:15:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\admin\\SelectableTable.tsx:15:19)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/admin/SelectableTable.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/admin/SelectableTable.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/admin/settings/SettingsPanel.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/admin/settings/SettingsPanel.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/admin/tiles/PostEditorTile.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/admin/tiles/PostEditorTile.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/admin/tiles/Tile.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/admin/tiles/Tile.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":186,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\select.tsx:47:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\analytics\\AnalyticsHeader.tsx:15:17)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\analytics\\AnalyticsDashboard.tsx:17:65)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\admin\\UnifiedAdmin.tsx:16:68)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/admin/UnifiedAdmin.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/admin/UnifiedAdmin.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":416,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/analytics/AnalyticsCharts.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/analytics/AnalyticsCharts.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\select.tsx:47:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\analytics\\AnalyticsHeader.tsx:15:17)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\analytics\\AnalyticsDashboard.tsx:17:65)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/analytics/AnalyticsDashboard.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/analytics/AnalyticsDashboard.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\select.tsx:47:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\analytics\\AnalyticsHeader.tsx:15:17)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/analytics/AnalyticsHeader.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/analytics/AnalyticsHeader.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":10,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/analytics/AnalyticsSidebar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/analytics/AnalyticsSidebar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":19,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/analytics/AnalyticsTable.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/analytics/AnalyticsTable.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\d3-scale\\src\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export {\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\analytics\\AnalyticsWorldMap.tsx:15:18)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/analytics/AnalyticsWorldMap.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/analytics/AnalyticsWorldMap.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/analytics/SessionsChart.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/analytics/SessionsChart.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":8,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/auth/UserMenu.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/auth/UserMenu.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\author-activity.tsx:15:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/author-activity.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/author-activity.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/AuthorsList.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/AuthorsList.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\back-to-top-center.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/back-to-top-center.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/back-to-top-center.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/Category.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/Category.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/client-feed.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/client-feed.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/Comment.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/Comment.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/CommentFormGate.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/CommentFormGate.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\select.tsx:47:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\comments-section.tsx:21:17)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/comments-section.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/comments-section.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/content-decorators.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/content-decorators.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/dashboard/CrewMan.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/dashboard/CrewMan.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/dashboard/DashboardClientShell.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/dashboard/DashboardClientShell.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/dashboard/FullDashboard.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/dashboard/FullDashboard.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/dashboard/MetricsDashboardControls.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/dashboard/MetricsDashboardControls.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":10,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/dashboard/SectionRenderer.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/dashboard/SectionRenderer.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":7,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/dashboard/TileRenderer.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/dashboard/TileRenderer.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/dashboard/WidgetRegistry.ts imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/dashboard/WidgetRegistry.ts imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/error-boundary.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/error-boundary.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/feed-skeleton.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/feed-skeleton.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\feed.tsx:12:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/feed.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/feed.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\floating-actions.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/floating-actions.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/floating-actions.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\Footer.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/Footer.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/Footer.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\header.tsx:16:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/header.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/header.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/HomeLatestVideoSection.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/HomeLatestVideoSection.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/LatestVideoFrame.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/LatestVideoFrame.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/LatestVideoPlayer.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/LatestVideoPlayer.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\react-markdown\\index.js:10\nexport {\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\markdown\\MarkdownRenderer.tsx:14:63)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/markdown/MarkdownRenderer.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/markdown/MarkdownRenderer.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/marquee.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/marquee.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/NoCopy.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/NoCopy.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\post-actions.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/post-actions.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/post-actions.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\post-author.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/post-author.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/post-author.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/post-card-skeleton.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/post-card-skeleton.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":7,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/post-card.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/post-card.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":156,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/profile/CommentsList.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/profile/CommentsList.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/profile/CommentsTabClient.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/profile/CommentsTabClient.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/profile/PostExcerpt.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/profile/PostExcerpt.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/profile/PostsList.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/profile/PostsList.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/profile/PostsTabClient.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/profile/PostsTabClient.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\profile\\ProfilePage.tsx:18:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/profile/ProfilePage.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/profile/ProfilePage.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/providers/react-query.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/providers/react-query.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\reader-toolbar.tsx:13:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\reader-toolbar-portal.tsx:14:63)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/reader-toolbar-portal.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/reader-toolbar-portal.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\reader-toolbar.tsx:13:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/reader-toolbar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/reader-toolbar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/reading-progress.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/reading-progress.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/RelatedPostsSidebar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/RelatedPostsSidebar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/Search.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/Search.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/SEO.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/SEO.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":7,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/Tag.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/Tag.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":14,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/theme-provider.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/theme-provider.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\theme-toggle.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/theme-toggle.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/theme-toggle.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":14,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/toc/TableOfContents.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/toc/TableOfContents.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\toc\\TOCControls.tsx:13:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/toc/TOCControls.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/toc/TOCControls.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/toc/TOCItem.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/toc/TOCItem.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/toc/types.ts imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/toc/types.ts imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/toc-list.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/toc-list.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\accordion.tsx:29:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/accordion.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/accordion.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/alert-dialog.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/alert-dialog.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/alert.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/alert.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/avatar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/avatar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/badge.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/badge.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/button.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/button.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\calendar.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/calendar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/calendar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/card.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/card.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\carousel.tsx:32:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/carousel.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/carousel.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/chart.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/chart.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\checkbox.tsx:15:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/checkbox.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/checkbox.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/client-image.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/client-image.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/collapsible.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/collapsible.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":7,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\dialog.tsx:47:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\command.tsx:45:17)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/command.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/command.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\dialog.tsx:47:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/dialog.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/dialog.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":18,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\dropdown-menu.tsx:62:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/dropdown-menu.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/dropdown-menu.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/form.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/form.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/input.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/input.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/label.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/label.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\menubar.tsx:65:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/menubar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/menubar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/popover.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/popover.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/progress.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/progress.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":7,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\radio-group.tsx:23:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/radio-group.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/radio-group.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/scroll-area.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/scroll-area.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\select.tsx:47:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/select.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/select.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/separator.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/separator.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\sheet.tsx:48:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/sheet.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/sheet.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\sidebar.tsx:90:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/sidebar.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/sidebar.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/skeleton.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/skeleton.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/slider.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/slider.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/switch.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/switch.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/table.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/table.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/tabs.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/tabs.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/ui/textarea.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/ui/textarea.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":9,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\toast.tsx:39:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/toast.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/toast.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\toast.tsx:39:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\components\\ui\\toaster.tsx:14:16)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:29:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/toaster.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/toaster.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":22,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n    at Object.toBeNull (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx:38:40)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"components smoke src/components/ui/tooltip.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/components/ui/tooltip.tsx imports and renders (if component)"},{"ancestorTitles":["components smoke"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"components smoke src/components/views-counter.tsx imports and renders (if component)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/components/views-counter.tsx imports and renders (if component)"}],"endTime":1756661895911,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/admin/AdminDashboard.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/admin/BulkActionsBar.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m   disabled\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m boolean\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m }\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mBulkActionsBar\u001b[39m({ onAction\u001b[33m,\u001b[39m disabled }\u001b[33m:\u001b[39m \u001b[33mProps\u001b[39m) {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m   \u001b[36mconst\u001b[39m [pending\u001b[33m,\u001b[39m setPending] \u001b[33m=\u001b[39m useState\u001b[33m<\u001b[39m\u001b[33mBulkAction\u001b[39m \u001b[33m|\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m>\u001b[39m(\u001b[36mnull\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m   \u001b[36mconst\u001b[39m run \u001b[33m=\u001b[39m \u001b[36masync\u001b[39m (action\u001b[33m:\u001b[39m \u001b[33mBulkAction\u001b[39m) \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/admin/BulkActionsBar.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/admin/moderation/ModerationPanel.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33mAccordionPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHeader\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"flex\"\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mAccordionPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mTrigger\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 29 |\u001b[39m       ref\u001b[33m=\u001b[39m{ref}\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 30 |\u001b[39m       className\u001b[33m=\u001b[39m{cn(\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m         \u001b[32m\"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m         className\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/accordion.tsx\u001b[2m:29:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/admin/moderation/ModerationPanel.tsx\u001b[2m:16:20)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/admin/SelectableTable.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33mCheckboxPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mRoot\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m     ref\u001b[33m=\u001b[39m{ref}\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m     className\u001b[33m=\u001b[39m{cn(\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m       \u001b[32m\"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m       className\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     )}\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/checkbox.tsx\u001b[2m:15:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/admin/SelectableTable.tsx\u001b[2m:15:19)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/admin/UnifiedAdmin.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m     {\u001b[33m...\u001b[39mprops}\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m   \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mChevronUp\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m ))\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m \u001b[33mSelectScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName \u001b[33m=\u001b[39m \u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/select.tsx\u001b[2m:47:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/analytics/AnalyticsHeader.tsx\u001b[2m:15:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/analytics/AnalyticsDashboard.tsx\u001b[2m:17:65)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/admin/UnifiedAdmin.tsx\u001b[2m:16:68)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/analytics/AnalyticsCharts.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/analytics/AnalyticsDashboard.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m     {\u001b[33m...\u001b[39mprops}\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m   \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mChevronUp\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m ))\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m \u001b[33mSelectScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName \u001b[33m=\u001b[39m \u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/select.tsx\u001b[2m:47:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/analytics/AnalyticsHeader.tsx\u001b[2m:15:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/analytics/AnalyticsDashboard.tsx\u001b[2m:17:65)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/analytics/AnalyticsHeader.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m     {\u001b[33m...\u001b[39mprops}\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m   \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mChevronUp\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m ))\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m \u001b[33mSelectScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName \u001b[33m=\u001b[39m \u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/select.tsx\u001b[2m:47:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/analytics/AnalyticsHeader.tsx\u001b[2m:15:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/analytics/AnalyticsSidebar.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/analytics/AnalyticsTable.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/analytics/AnalyticsWorldMap.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\d3-scale\\src\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export {\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mCard\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m'@/components/ui/card'\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m \u001b[36mimport\u001b[39m type { \u001b[33mPeriod\u001b[39m\u001b[33m,\u001b[39m \u001b[33mCountryBreakdown\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m'../../../types/analytics'\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m \u001b[90m// Register English locale for country mappings if needed\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mtry\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/analytics/AnalyticsWorldMap.tsx\u001b[2m:15:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/analytics/SessionsChart.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/auth/UserMenu.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/author-activity.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mAuthorActivity\u001b[39m({ authorId }\u001b[33m:\u001b[39m { authorId\u001b[33m:\u001b[39m number }) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m   \u001b[36mconst\u001b[39m [posts\u001b[33m,\u001b[39m setPosts] \u001b[33m=\u001b[39m useState\u001b[33m<\u001b[39m\u001b[33mWPPost\u001b[39m[]\u001b[33m>\u001b[39m([])\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m   \u001b[36mconst\u001b[39m [comments\u001b[33m,\u001b[39m setComments] \u001b[33m=\u001b[39m useState\u001b[33m<\u001b[39m\u001b[33mWPComment\u001b[39m[]\u001b[33m>\u001b[39m([])\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m   \u001b[36mconst\u001b[39m [postIndex\u001b[33m,\u001b[39m setPostIndex] \u001b[33m=\u001b[39m useState\u001b[33m<\u001b[39m\u001b[33mRecord\u001b[39m\u001b[33m<\u001b[39m\u001b[33mnumber\u001b[39m\u001b[33m,\u001b[39m { slug\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m string\u001b[33m;\u001b[39m title\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m string }\u001b[33m>>\u001b[39m({})\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m   \u001b[36mconst\u001b[39m [loading\u001b[33m,\u001b[39m setLoading] \u001b[33m=\u001b[39m useState(\u001b[36mtrue\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/author-activity.tsx\u001b[2m:15:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/back-to-top-center.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m     \u001b[36mreturn\u001b[39m () \u001b[33m=>\u001b[39m window\u001b[33m.\u001b[39mremoveEventListener(\u001b[32m'scroll'\u001b[39m\u001b[33m,\u001b[39m onScroll)\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   }\u001b[33m,\u001b[39m [threshold])\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m   \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mvisible) \u001b[36mreturn\u001b[39m \u001b[36mnull\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m   \u001b[36mreturn\u001b[39m (\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/back-to-top-center.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/Category.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/Comment.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/comments-section.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m     {\u001b[33m...\u001b[39mprops}\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m   \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mChevronUp\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m ))\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m \u001b[33mSelectScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName \u001b[33m=\u001b[39m \u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/select.tsx\u001b[2m:47:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/comments-section.tsx\u001b[2m:21:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/dashboard/FullDashboard.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/dashboard/SectionRenderer.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/dashboard/TileRenderer.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/feed.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 10 |\u001b[39m type \u001b[33mFeedProps\u001b[39m \u001b[33m=\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 11 |\u001b[39m   layout\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'grid'\u001b[39m \u001b[33m|\u001b[39m \u001b[32m'list'\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 12 |\u001b[39m   postCount\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mFeed\u001b[39m({ layout \u001b[33m=\u001b[39m \u001b[32m'grid'\u001b[39m\u001b[33m,\u001b[39m postCount \u001b[33m=\u001b[39m \u001b[35m6\u001b[39m }\u001b[33m:\u001b[39m \u001b[33mFeedProps\u001b[39m) {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/feed.tsx\u001b[2m:12:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/floating-actions.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m   \u001b[36mconst\u001b[39m { toast } \u001b[33m=\u001b[39m useToast()\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   \u001b[36mconst\u001b[39m [bookmarkState\u001b[33m,\u001b[39m setBookmarkState] \u001b[33m=\u001b[39m useState\u001b[33m<\u001b[39m{ bookmarked\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m count\u001b[33m:\u001b[39m number } \u001b[33m|\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m>\u001b[39m(\u001b[36mnull\u001b[39m)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m   \u001b[36mconst\u001b[39m [busy\u001b[33m,\u001b[39m setBusy] \u001b[33m=\u001b[39m useState(\u001b[36mfalse\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m   \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m share() {\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     \u001b[36mtry\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m       \u001b[36mif\u001b[39m (navigator\u001b[33m.\u001b[39mshare) {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/floating-actions.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/Footer.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mh3\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"font-bold text-lg mb-4\"\u001b[39m\u001b[33m>\u001b[39mtech\u001b[33m.\u001b[39moblivion\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mh3\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mp\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"text-muted-foreground\"\u001b[39m\u001b[33m>\u001b[39m\u001b[33mTechnology\u001b[39m \u001b[36mwith\u001b[39m purpose\u001b[33m.\u001b[39m \u001b[33mExploring\u001b[39m the future \u001b[36mof\u001b[39m web development and \u001b[33mAI\u001b[39m\u001b[33m.\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mp\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m             \u001b[33m<\u001b[39m\u001b[33mh3\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"font-semibold mb-4\"\u001b[39m\u001b[33m>\u001b[39m\u001b[33mQuick\u001b[39m \u001b[33mLinks\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mh3\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/Footer.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/header.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 14 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mDropdownMenu\u001b[39m\u001b[33m,\u001b[39m \u001b[33mDropdownMenuTrigger\u001b[39m\u001b[33m,\u001b[39m \u001b[33mDropdownMenuContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mDropdownMenuItem\u001b[39m\u001b[33m,\u001b[39m \u001b[33mDropdownMenuSub\u001b[39m\u001b[33m,\u001b[39m \u001b[33mDropdownMenuSubTrigger\u001b[39m\u001b[33m,\u001b[39m \u001b[33mDropdownMenuSubContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mDropdownMenuPortal\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"./ui/dropdown-menu\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 16 |\u001b[39m \u001b[36mconst\u001b[39m navLinks \u001b[33m=\u001b[39m [\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m   { href\u001b[33m:\u001b[39m \u001b[32m\"/\"\u001b[39m\u001b[33m,\u001b[39m label\u001b[33m:\u001b[39m \u001b[32m\"Home\"\u001b[39m }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m   { href\u001b[33m:\u001b[39m \u001b[32m\"/blog\"\u001b[39m\u001b[33m,\u001b[39m label\u001b[33m:\u001b[39m \u001b[32m\"Articles\"\u001b[39m }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m   { href\u001b[33m:\u001b[39m \u001b[32m\"/about\"\u001b[39m\u001b[33m,\u001b[39m label\u001b[33m:\u001b[39m \u001b[32m\"About\"\u001b[39m }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/header.tsx\u001b[2m:16:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/markdown/MarkdownRenderer.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\react-markdown\\index.js:10\n    export {\n    ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m   markdown\u001b[33m:\u001b[39m string\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   className\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m string\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mMarkdownRenderer\u001b[39m({ markdown\u001b[33m,\u001b[39m className }\u001b[33m:\u001b[39m \u001b[33mProps\u001b[39m) {\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m   \u001b[36mreturn\u001b[39m (\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/markdown/MarkdownRenderer.tsx\u001b[2m:14:63)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/post-actions.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m   slug\u001b[33m:\u001b[39m string\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   title\u001b[33m:\u001b[39m string\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mPostActions\u001b[39m({ postId\u001b[33m,\u001b[39m slug\u001b[33m,\u001b[39m title }\u001b[33m:\u001b[39m \u001b[33mProps\u001b[39m) {\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m   \u001b[36mconst\u001b[39m { toast } \u001b[33m=\u001b[39m useToast()\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/post-actions.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/post-author.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m   profileSlug\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m string \u001b[33m|\u001b[39m \u001b[36mnull\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   twitterUrl\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m string \u001b[33m|\u001b[39m \u001b[36mnull\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m   linkedinUrl\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m string \u001b[33m|\u001b[39m \u001b[36mnull\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m   githubUrl\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m string \u001b[33m|\u001b[39m \u001b[36mnull\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m }\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/post-author.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/post-card.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/profile/PostExcerpt.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/profile/ProfilePage.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 16 |\u001b[39m \u001b[36mconst\u001b[39m \u001b[33mCommentsTabClient\u001b[39m \u001b[33m=\u001b[39m dynamic(() \u001b[33m=>\u001b[39m \u001b[36mimport\u001b[39m(\u001b[32m'./CommentsTabClient'\u001b[39m))\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mPublicUserProfile\u001b[39m \u001b[33m=\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m   id\u001b[33m:\u001b[39m number\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m   name\u001b[33m:\u001b[39m string\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m   slug\u001b[33m:\u001b[39m string\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/profile/ProfilePage.tsx\u001b[2m:18:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/reader-toolbar-portal.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m   \u001b[36mconst\u001b[39m lastClickRef \u001b[33m=\u001b[39m useRef\u001b[33m<\u001b[39m\u001b[33mnumber\u001b[39m\u001b[33m>\u001b[39m(\u001b[35m0\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m   useEffect(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m     \u001b[36mconst\u001b[39m s \u001b[33m=\u001b[39m \u001b[33mNumber\u001b[39m(localStorage\u001b[33m.\u001b[39mgetItem(\u001b[32m'reader:scale'\u001b[39m) \u001b[33m||\u001b[39m \u001b[32m'100'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m     setScale(isNaN(s) \u001b[33m?\u001b[39m \u001b[35m100\u001b[39m \u001b[33m:\u001b[39m s)\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     setDraft(\u001b[33mString\u001b[39m(isNaN(s) \u001b[33m?\u001b[39m \u001b[35m100\u001b[39m \u001b[33m:\u001b[39m s))\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/reader-toolbar.tsx\u001b[2m:13:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/reader-toolbar-portal.tsx\u001b[2m:14:63)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/reader-toolbar.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m   \u001b[36mconst\u001b[39m lastClickRef \u001b[33m=\u001b[39m useRef\u001b[33m<\u001b[39m\u001b[33mnumber\u001b[39m\u001b[33m>\u001b[39m(\u001b[35m0\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m   useEffect(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m     \u001b[36mconst\u001b[39m s \u001b[33m=\u001b[39m \u001b[33mNumber\u001b[39m(localStorage\u001b[33m.\u001b[39mgetItem(\u001b[32m'reader:scale'\u001b[39m) \u001b[33m||\u001b[39m \u001b[32m'100'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m     setScale(isNaN(s) \u001b[33m?\u001b[39m \u001b[35m100\u001b[39m \u001b[33m:\u001b[39m s)\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     setDraft(\u001b[33mString\u001b[39m(isNaN(s) \u001b[33m?\u001b[39m \u001b[35m100\u001b[39m \u001b[33m:\u001b[39m s))\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/reader-toolbar.tsx\u001b[2m:13:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/Tag.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/theme-provider.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/theme-toggle.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m   \u001b[36mconst\u001b[39m toggleTheme \u001b[33m=\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m     setTheme(theme \u001b[33m===\u001b[39m \u001b[32m'dark'\u001b[39m \u001b[33m?\u001b[39m \u001b[32m'light'\u001b[39m \u001b[33m:\u001b[39m \u001b[32m'dark'\u001b[39m)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m   \u001b[36mreturn\u001b[39m (\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mButton\u001b[39m variant\u001b[33m=\u001b[39m\u001b[32m\"ghost\"\u001b[39m size\u001b[33m=\u001b[39m\u001b[32m\"icon\"\u001b[39m aria\u001b[33m-\u001b[39mlabel\u001b[33m=\u001b[39m\u001b[32m\"Toggle theme\"\u001b[39m onClick\u001b[33m=\u001b[39m{toggleTheme}\u001b[33m>\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/theme-toggle.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/toc/TableOfContents.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/toc/TOCControls.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m         className\u001b[33m=\u001b[39m{\u001b[32m`p-1 rounded ${effectiveTheme==='light' ? 'text-primary bg-primary/10' : 'hover:text-primary'}`\u001b[39m}\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m         aria\u001b[33m-\u001b[39mlabel\u001b[33m=\u001b[39m\u001b[32m\"Light\"\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m         aria\u001b[33m-\u001b[39mpressed\u001b[33m=\u001b[39m{effectiveTheme\u001b[33m===\u001b[39m\u001b[32m'light'\u001b[39m}\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m         onClick\u001b[33m=\u001b[39m{()\u001b[33m=>\u001b[39msetTheme(\u001b[32m'light'\u001b[39m)}\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m       \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mSun\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m\u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/toc/TOCControls.tsx\u001b[2m:13:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/toc-list.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/accordion.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 27 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33mAccordionPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mHeader\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"flex\"\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mAccordionPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mTrigger\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 29 |\u001b[39m       ref\u001b[33m=\u001b[39m{ref}\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 30 |\u001b[39m       className\u001b[33m=\u001b[39m{cn(\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m         \u001b[32m\"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 32 |\u001b[39m         className\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/accordion.tsx\u001b[2m:29:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/calendar.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mCalendar\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   className\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m   classNames\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m   showOutsideDays \u001b[33m=\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m   \u001b[33m...\u001b[39mprops\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m }\u001b[33m:\u001b[39m \u001b[33mCalendarProps\u001b[39m) {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/calendar.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/carousel.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 |\u001b[39m   canScrollNext\u001b[33m:\u001b[39m boolean\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m } \u001b[33m&\u001b[39m \u001b[33mCarouselProps\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 32 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 33 |\u001b[39m \u001b[36mconst\u001b[39m \u001b[33mCarouselContext\u001b[39m \u001b[33m=\u001b[39m \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39mcreateContext\u001b[33m<\u001b[39m\u001b[33mCarouselContextProps\u001b[39m \u001b[33m|\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m>\u001b[39m(\u001b[36mnull\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m \u001b[36mfunction\u001b[39m useCarousel() {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/carousel.tsx\u001b[2m:32:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/checkbox.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33mCheckboxPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mRoot\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m     ref\u001b[33m=\u001b[39m{ref}\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m     className\u001b[33m=\u001b[39m{cn(\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m       \u001b[32m\"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m       className\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     )}\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/checkbox.tsx\u001b[2m:15:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/command.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m     \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m       {children}\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mDialogPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mClose\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mX\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mspan\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"sr-only\"\u001b[39m\u001b[33m>\u001b[39m\u001b[33mClose\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mspan\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mDialogPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mClose\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/dialog.tsx\u001b[2m:47:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/command.tsx\u001b[2m:45:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/dialog.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m     \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m       {children}\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mDialogPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mClose\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mX\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m         \u001b[33m<\u001b[39m\u001b[33mspan\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"sr-only\"\u001b[39m\u001b[33m>\u001b[39m\u001b[33mClose\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mspan\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mDialogPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mClose\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/dialog.tsx\u001b[2m:47:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/dropdown-menu.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 60 |\u001b[39m   \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mElementRef\u001b[39m\u001b[33m<\u001b[39m\u001b[36mtypeof\u001b[39m \u001b[33mDropdownMenuPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mContent\u001b[39m\u001b[33m>\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 61 |\u001b[39m   \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mComponentPropsWithoutRef\u001b[39m\u001b[33m<\u001b[39m\u001b[36mtypeof\u001b[39m \u001b[33mDropdownMenuPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mContent\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 62 |\u001b[39m \u001b[33m>\u001b[39m(({ className\u001b[33m,\u001b[39m sideOffset \u001b[33m=\u001b[39m \u001b[35m4\u001b[39m\u001b[33m,\u001b[39m \u001b[33m...\u001b[39mprops }\u001b[33m,\u001b[39m ref) \u001b[33m=>\u001b[39m (\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 63 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33mDropdownMenuPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mPortal\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 64 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mDropdownMenuPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mContent\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 65 |\u001b[39m       ref\u001b[33m=\u001b[39m{ref}\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/dropdown-menu.tsx\u001b[2m:62:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/menubar.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 |\u001b[39m     )}\u001b[22m\n\u001b[2m     \u001b[90m 64 |\u001b[39m     {\u001b[33m...\u001b[39mprops}\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 65 |\u001b[39m   \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 66 |\u001b[39m ))\u001b[22m\n\u001b[2m     \u001b[90m 67 |\u001b[39m \u001b[33mMenubarTrigger\u001b[39m\u001b[33m.\u001b[39mdisplayName \u001b[33m=\u001b[39m \u001b[33mMenubarPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mTrigger\u001b[39m\u001b[33m.\u001b[39mdisplayName\u001b[22m\n\u001b[2m     \u001b[90m 68 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/menubar.tsx\u001b[2m:65:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/radio-group.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 |\u001b[39m \u001b[33mRadioGroup\u001b[39m\u001b[33m.\u001b[39mdisplayName \u001b[33m=\u001b[39m \u001b[33mRadioGroupPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mRoot\u001b[39m\u001b[33m.\u001b[39mdisplayName\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 23 |\u001b[39m \u001b[36mconst\u001b[39m \u001b[33mRadioGroupItem\u001b[39m \u001b[33m=\u001b[39m \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39mforwardRef\u001b[33m<\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m   \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mElementRef\u001b[39m\u001b[33m<\u001b[39m\u001b[36mtypeof\u001b[39m \u001b[33mRadioGroupPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mItem\u001b[39m\u001b[33m>\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m   \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mComponentPropsWithoutRef\u001b[39m\u001b[33m<\u001b[39m\u001b[36mtypeof\u001b[39m \u001b[33mRadioGroupPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mItem\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 26 |\u001b[39m \u001b[33m>\u001b[39m(({ className\u001b[33m,\u001b[39m \u001b[33m...\u001b[39mprops }\u001b[33m,\u001b[39m ref) \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/radio-group.tsx\u001b[2m:23:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/select.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 |\u001b[39m     {\u001b[33m...\u001b[39mprops}\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m   \u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 47 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mChevronUp\u001b[39m className\u001b[33m=\u001b[39m\u001b[32m\"h-4 w-4\"\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m   \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m ))\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m \u001b[33mSelectScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName \u001b[33m=\u001b[39m \u001b[33mSelectPrimitive\u001b[39m\u001b[33m.\u001b[39m\u001b[33mScrollUpButton\u001b[39m\u001b[33m.\u001b[39mdisplayName\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/select.tsx\u001b[2m:47:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/sheet.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 46 |\u001b[39m     defaultVariants\u001b[33m:\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 47 |\u001b[39m       side\u001b[33m:\u001b[39m \u001b[32m\"right\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 48 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m )\u001b[22m\n\u001b[2m     \u001b[90m 51 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/sheet.tsx\u001b[2m:48:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/sidebar.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 88 |\u001b[39m       }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 89 |\u001b[39m       [setOpenProp\u001b[33m,\u001b[39m open]\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 90 |\u001b[39m     )\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 91 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m     \u001b[90m// Helper to toggle the sidebar.\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m     \u001b[36mconst\u001b[39m toggleSidebar \u001b[33m=\u001b[39m \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39museCallback(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/sidebar.tsx\u001b[2m:90:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/toast.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 |\u001b[39m     defaultVariants\u001b[33m:\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 38 |\u001b[39m       variant\u001b[33m:\u001b[39m \u001b[32m\"default\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 39 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m )\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/toast.tsx\u001b[2m:39:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/toaster.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 |\u001b[39m     defaultVariants\u001b[33m:\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 38 |\u001b[39m       variant\u001b[33m:\u001b[39m \u001b[32m\"default\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 39 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m )\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/toast.tsx\u001b[2m:39:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/components/ui/toaster.tsx\u001b[2m:14:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:29:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcomponents smoke › src/components/ui/tooltip.tsx imports and renders (if component)\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m<div data-testid=\"error\">Tile failed</div>\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 |\u001b[39m           \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mErrorBoundary\u001b[39m\u001b[33m>\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         )\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 |\u001b[39m         expect(queryByTestId(\u001b[32m'error'\u001b[39m))\u001b[33m.\u001b[39mtoBeNull()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m         expect(mod)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/components.smoke.test.tsx\u001b[39m\u001b[0m\u001b[2m:38:40)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\components.smoke.test.tsx","startTime":1756661893537,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["pages smoke"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"pages smoke src/app/account/avatar/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/account/avatar/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"pages smoke src/app/account/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/account/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"pages smoke src/app/account/profile/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/account/profile/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":9,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\editor\\new\\page.tsx:13:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\pages.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"pages smoke src/app/editor/new/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/editor/new/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"pages smoke src/app/editor/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/editor/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":5,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\editor\\[id]\\page.tsx:13:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\pages.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"pages smoke src/app/editor/[id]/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/editor/[id]/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"pages smoke src/app/login/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/login/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":17,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\nimport * as index from './icons/index.js';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\page.tsx:14:22)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\pages.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"pages smoke src/app/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/page.tsx exports a component"},{"ancestorTitles":["pages smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"pages smoke src/app/test/page.tsx exports a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/test/page.tsx exports a component"}],"endTime":1756661896342,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mpages smoke › src/app/editor/new/page.tsx exports a component\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mCard\u001b[39m\u001b[33m,\u001b[39m \u001b[33mCardContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mCardFooter\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/card\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mSelect\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectItem\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectTrigger\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectValue\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/select\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mTooltip\u001b[39m\u001b[33m,\u001b[39m \u001b[33mTooltipContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mTooltipProvider\u001b[39m\u001b[33m,\u001b[39m \u001b[33mTooltipTrigger\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/tooltip\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mSeparator\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/separator\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mAlert\u001b[39m\u001b[33m,\u001b[39m \u001b[33mAlertDescription\u001b[39m\u001b[33m,\u001b[39m \u001b[33mAlertTitle\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/alert\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mAccordion\u001b[39m\u001b[33m,\u001b[39m \u001b[33mAccordionContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mAccordionItem\u001b[39m\u001b[33m,\u001b[39m \u001b[33mAccordionTrigger\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/accordion\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/editor/new/page.tsx\u001b[2m:13:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/pages.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mpages smoke › src/app/editor/[id]/page.tsx exports a component\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 11 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mLabel\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/label\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mCard\u001b[39m\u001b[33m,\u001b[39m \u001b[33mCardContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mCardFooter\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/card\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 13 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mSelect\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectItem\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectTrigger\u001b[39m\u001b[33m,\u001b[39m \u001b[33mSelectValue\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/select\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mBadge\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/badge\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mTooltip\u001b[39m\u001b[33m,\u001b[39m \u001b[33mTooltipContent\u001b[39m\u001b[33m,\u001b[39m \u001b[33mTooltipProvider\u001b[39m\u001b[33m,\u001b[39m \u001b[33mTooltipTrigger\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/tooltip\"\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mSeparator\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"@/components/ui/separator\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/editor/[id]/page.tsx\u001b[2m:13:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/pages.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mpages smoke › src/app/page.tsx exports a component\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\lucide-react\\dist\\esm\\lucide-react.js:8\n    import * as index from './icons/index.js';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mHome\u001b[39m() {\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   \u001b[36mconst\u001b[39m summary \u001b[33m=\u001b[39m \u001b[32m'Latest updates from our blog.'\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 |\u001b[39m   \u001b[90m// Example FAQ data; replace with real data if available\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 15 |\u001b[39m   \u001b[36mconst\u001b[39m faqs \u001b[33m=\u001b[39m [\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m     { question\u001b[33m:\u001b[39m \u001b[32m\"What is Tech.Oblivion?\"\u001b[39m\u001b[33m,\u001b[39m answer\u001b[33m:\u001b[39m \u001b[32m\"A modern tech blog and community for web, AI, and engineering.\"\u001b[39m }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m     { question\u001b[33m:\u001b[39m \u001b[32m\"How can I contribute?\"\u001b[39m\u001b[33m,\u001b[39m answer\u001b[33m:\u001b[39m \u001b[32m\"Join as an author or participate in the community Discord.\"\u001b[39m }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/page.tsx\u001b[2m:14:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/pages.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\pages.smoke.test.ts","startTime":1756661896137,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBeTruthy (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:26:51)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/auth/login/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/auth/login/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBeTruthy (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:26:51)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/auth/logout/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/auth/logout/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBeTruthy (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:26:51)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/auth/me/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/auth/me/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/core/endpoints/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/core/endpoints/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/media-cache/image/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/media-cache/image/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/media-cache/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/media-cache/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/metrics/layout/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/metrics/layout/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/test/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/test/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":8,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\api\\wp\\categories\\route.ts:26:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/wp/categories/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/wp/categories/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\api\\wp\\comments\\route.ts:27:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/wp/comments/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/wp/comments/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/wp/media/list/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/wp/media/list/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/wp/media/[...path]/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/wp/media/[...path]/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/wp/media/[...slug]/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/wp/media/[...slug]/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/wp/media/_debug/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/wp/media/_debug/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":5,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\api\\wp\\posts\\route.ts:33:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/wp/posts/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/wp/posts/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/wp/related/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/wp/related/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\api\\wp\\tags\\resolve\\route.ts:23:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/wp/tags/resolve/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/wp/tags/resolve/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\api\\wp\\tags\\route.ts:26:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/wp/tags/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/wp/tags/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":4,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\app\\api\\wp\\users\\me\\route.ts:23:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts:25:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"api routes smoke src/app/api/wp/users/me/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/app/api/wp/users/me/route.ts exports handlers"},{"ancestorTitles":["api routes smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api routes smoke src/app/api/_debug/route.ts exports handlers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/app/api/_debug/route.ts exports handlers"}],"endTime":1756661896546,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/auth/login/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 |\u001b[39m       \u001b[90m// eslint-disable-next-line @typescript-eslint/no-var-requires\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m       \u001b[36mconst\u001b[39m mod \u001b[33m=\u001b[39m require(file)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 26 |\u001b[39m       expect(mod \u001b[33m&&\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(mod)\u001b[33m.\u001b[39mlength \u001b[33m>=\u001b[39m \u001b[35m1\u001b[39m)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m     })\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeTruthy (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:26:51)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/auth/logout/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 |\u001b[39m       \u001b[90m// eslint-disable-next-line @typescript-eslint/no-var-requires\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m       \u001b[36mconst\u001b[39m mod \u001b[33m=\u001b[39m require(file)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 26 |\u001b[39m       expect(mod \u001b[33m&&\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(mod)\u001b[33m.\u001b[39mlength \u001b[33m>=\u001b[39m \u001b[35m1\u001b[39m)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m     })\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeTruthy (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:26:51)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/auth/me/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 |\u001b[39m       \u001b[90m// eslint-disable-next-line @typescript-eslint/no-var-requires\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m       \u001b[36mconst\u001b[39m mod \u001b[33m=\u001b[39m require(file)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 26 |\u001b[39m       expect(mod \u001b[33m&&\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(mod)\u001b[33m.\u001b[39mlength \u001b[33m>=\u001b[39m \u001b[35m1\u001b[39m)\u001b[33m.\u001b[39mtoBeTruthy()\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m     })\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m   }\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeTruthy (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:26:51)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/wp/categories/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/api/wp/categories/route.ts\u001b[2m:26:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/wp/comments/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/api/wp/comments/route.ts\u001b[2m:27:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/wp/posts/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/api/wp/posts/route.ts\u001b[2m:33:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/wp/tags/resolve/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/api/wp/tags/resolve/route.ts\u001b[2m:23:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/wp/tags/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/api/wp/tags/route.ts\u001b[2m:26:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mapi routes smoke › src/app/api/wp/users/me/route.ts exports handlers\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/app/api/wp/users/me/route.ts\u001b[2m:23:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/api.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:25:19)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\api.smoke.test.ts","startTime":1756661896354,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["lib smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\auth.ts:23:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\lib.smoke.test.ts:27:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"lib smoke src/lib/auth.ts imports","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/lib/auth.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/autolink.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/autolink.ts imports"},{"ancestorTitles":["lib smoke"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/checkAccess.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/checkAccess.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/csrf.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/csrf.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/entities.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/entities.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/fetcher.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/fetcher.ts imports"},{"ancestorTitles":["lib smoke"],"duration":3,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\fetchWithAuth.ts:22:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\lib.smoke.test.ts:27:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"lib smoke src/lib/fetchWithAuth.ts imports","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/lib/fetchWithAuth.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/generateSchema.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/generateSchema.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\lib.smoke.test.ts:27:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"lib smoke src/lib/jwt.ts imports","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/lib/jwt.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/log.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/log.ts imports"},{"ancestorTitles":["lib smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/logger.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/logger.ts imports"},{"ancestorTitles":["lib smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/mediaCache.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/mediaCache.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/rbac.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/rbac.ts imports"},{"ancestorTitles":["lib smoke"],"duration":6,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\server-session.ts:20:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\requireAccess.ts:11:24)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\lib.smoke.test.ts:27:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"lib smoke src/lib/requireAccess.ts imports","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/lib/requireAccess.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/roles.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/roles.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/sanitize.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/sanitize.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                  ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\jwt.ts:19:15)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\server-session.ts:20:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\lib.smoke.test.ts:27:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"lib smoke src/lib/server-session.ts imports","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/lib/server-session.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/serverCache.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/serverCache.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/settings.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/settings.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/site.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/site.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/taxonomy-client.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/taxonomy-client.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/template.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/template.ts imports"},{"ancestorTitles":["lib smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/text.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/text.ts imports"},{"ancestorTitles":["lib smoke"],"duration":5,"failureDetails":[{}],"failureMessages":["\u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\nJest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\nOut of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\nBy default \"node_modules\" folder is ignored by transformers.\n\nHere's what you can do:\n • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\nYou'll find more details and examples of these config options in the docs:\n\u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\nFor information about custom transformations, see:\n\u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n\u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\nE:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\unified\\index.js:2\nexport {unified} from './lib/index.js'\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at new Script (node:vm:117:7)\n    at Runtime.createScriptFromCode (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1505:14)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1399:25)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.<anonymous> (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\toc-md.ts:11:18)\n    at Runtime._execModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1439:24)\n    at Runtime._loadModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1022:12)\n    at Runtime.requireModule (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:882:12)\n    at Runtime.requireModuleOrMock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runtime\\build\\index.js:1048:21)\n    at Object.require (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\lib.smoke.test.ts:27:19)\n    at Promise.then.completed (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"lib smoke src/lib/toc-md.ts imports","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"src/lib/toc-md.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/toc.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/toc.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/utils.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/utils.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/wordpress-client.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/wordpress-client.ts imports"},{"ancestorTitles":["lib smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/wp-author.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/wp-author.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/wp-public.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/wp-public.ts imports"},{"ancestorTitles":["lib smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/wp.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/wp.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/wpAPIMap.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/wpAPIMap.ts imports"},{"ancestorTitles":["lib smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"lib smoke src/lib/wpProxy.ts imports","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/lib/wpProxy.ts imports"}],"endTime":1756661896745,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mlib smoke › src/lib/auth.ts imports\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/auth.ts\u001b[2m:23:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/lib.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:27:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mlib smoke › src/lib/fetchWithAuth.ts imports\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/fetchWithAuth.ts\u001b[2m:22:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/lib.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:27:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mlib smoke › src/lib/jwt.ts imports\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/lib.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:27:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mlib smoke › src/lib/requireAccess.ts imports\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/server-session.ts\u001b[2m:20:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/requireAccess.ts\u001b[2m:11:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/lib.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:27:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mlib smoke › src/lib/server-session.ts imports\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\jose\\dist\\webapi\\index.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m signSession(claims\u001b[33m:\u001b[39m \u001b[33mSessionClaims\u001b[39m\u001b[33m,\u001b[39m maxAgeSec \u001b[33m=\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m60\u001b[39m \u001b[33m*\u001b[39m \u001b[35m24\u001b[39m \u001b[33m*\u001b[39m \u001b[35m7\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m   \u001b[36mreturn\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mSignJWT\u001b[39m(claims \u001b[36mas\u001b[39m any)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     \u001b[33m.\u001b[39msetProtectedHeader({ alg\u001b[33m:\u001b[39m \u001b[32m'HS256'\u001b[39m })\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     \u001b[33m.\u001b[39msetIssuedAt()\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[33m.\u001b[39msetIssuer(issuer)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/jwt.ts\u001b[2m:19:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/server-session.ts\u001b[2m:20:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/lib.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:27:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mlib smoke › src/lib/toc-md.ts imports\u001b[39m\u001b[22m\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\node_modules\\unified\\index.js:2\n    export {unified} from './lib/index.js'\n    ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m extractTocFromMarkdown(markdown\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m { minDepth\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m maxDepth\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number }) {\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m   \u001b[36mconst\u001b[39m minDepth \u001b[33m=\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mminDepth \u001b[33m?\u001b[39m\u001b[33m?\u001b[39m \u001b[35m2\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m   \u001b[36mconst\u001b[39m maxDepth \u001b[33m=\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mmaxDepth \u001b[33m?\u001b[39m\u001b[33m?\u001b[39m \u001b[35m3\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m   \u001b[36mconst\u001b[39m tree \u001b[33m=\u001b[39m unified()\u001b[33m.\u001b[39muse(remarkParse)\u001b[33m.\u001b[39mparse(markdown) \u001b[36mas\u001b[39m \u001b[33mRoot\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m   \u001b[36mconst\u001b[39m slugger \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mGithubSlugger\u001b[39m()\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m   \u001b[36mconst\u001b[39m items\u001b[33m:\u001b[39m \u001b[33mTocItem\u001b[39m[] \u001b[33m=\u001b[39m []\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Runtime.createScriptFromCode (\u001b[22m\u001b[2mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2msrc/lib/toc-md.ts\u001b[2m:11:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.require (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/lib.smoke.test.ts\u001b[39m\u001b[0m\u001b[2m:27:19)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\lib.smoke.test.ts","startTime":1756661896559,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["hooks smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"hooks smoke src/hooks/use-mobile.tsx compiles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/hooks/use-mobile.tsx compiles"},{"ancestorTitles":["hooks smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"hooks smoke src/hooks/use-toast.ts compiles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/hooks/use-toast.ts compiles"},{"ancestorTitles":["hooks smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"hooks smoke src/hooks/useLayoutPersistence.ts compiles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/hooks/useLayoutPersistence.ts compiles"},{"ancestorTitles":["hooks smoke"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"hooks smoke src/hooks/useRoleGate.tsx compiles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/hooks/useRoleGate.tsx compiles"},{"ancestorTitles":["hooks smoke"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"hooks smoke src/hooks/useScrollSpy.ts compiles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/hooks/useScrollSpy.ts compiles"},{"ancestorTitles":["hooks smoke"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"hooks smoke src/hooks/useSSE.ts compiles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"src/hooks/useSSE.ts compiles"}],"endTime":1756661896889,"message":"","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\hooks.smoke.test.ts","startTime":1756661896761,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["jest sanity"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"jest sanity runs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs"}],"endTime":1756661897021,"message":"","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\sanity.test.ts","startTime":1756661896906,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Vitest cannot be imported in a CommonJS module using require(). Please use \"import\" instead.\n\n    If you are using \"import\" in your source code, then it's possible it was bundled into require() automatically by your bundler. In that case, do not bundle CommonJS output since it will never work with Vitest, or use dynamic import() which is available in all CommonJS modules.\n\n    \u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33m*\u001b[39m \u001b[36mas\u001b[39m log \u001b[36mfrom\u001b[39m \u001b[32m'../log'\u001b[39m\n     \u001b[90m 4 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 5 |\u001b[39m \u001b[36mconst\u001b[39m \u001b[33mHTML_503\u001b[39m \u001b[33m=\u001b[39m \u001b[32m`<!DOCTYPE html><html><head><title>Maintenance</title></head><body><p>Site under maintenance</p></body></html>`\u001b[39m\n     \u001b[90m   |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 6 |\u001b[39m\n     \u001b[90m 7 |\u001b[39m describe(\u001b[32m'wp helpers - resilience'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 8 |\u001b[39m   \u001b[36mlet\u001b[39m originalFetch\u001b[33m:\u001b[39m any\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22mnode_modules/vitest/index.cjs\u001b[2m:1:109)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36msrc/lib/__tests__/wp.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:17)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\__tests__\\wp.spec.ts","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Vitest cannot be imported in a CommonJS module using require(). Please use \"import\" instead.\n\n    If you are using \"import\" in your source code, then it's possible it was bundled into require() automatically by your bundler. In that case, do not bundle CommonJS output since it will never work with Vitest, or use dynamic import() which is available in all CommonJS modules.\n\n    \u001b[0m \u001b[90m 3 |\u001b[39m describe(\u001b[32m'wpFetch env guard'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 4 |\u001b[39m   it(\u001b[32m'throws when WP_URL is not set'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 5 |\u001b[39m     \u001b[90m// Ensure env var is absent for this test\u001b[39m\n     \u001b[90m   |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 6 |\u001b[39m     \u001b[36mconst\u001b[39m orig \u001b[33m=\u001b[39m process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mWP_URL\u001b[39m\n     \u001b[90m 7 |\u001b[39m     \u001b[36mdelete\u001b[39m process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mWP_URL\u001b[39m\n     \u001b[90m 8 |\u001b[39m     \u001b[90m// Dynamically import to get fresh module state\u001b[39m\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22mnode_modules/vitest/index.cjs\u001b[2m:1:109)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36msrc/lib/__tests__/wpFetch.env.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:17)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\lib\\__tests__\\wpFetch.env.spec.ts","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\styleMock.js","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\TestErrorBoundary.tsx","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\serverOnlyMock.js","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\nextServerMock.js","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\nextNavigationMock.js","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\nextImageMock.js","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Your test suite must contain at least one test.\n\n      \u001b[2mat onResult (\u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:133:18)\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/@jest/core/build/TestScheduler.js\u001b[2m:254:19\u001b[22m\n      \u001b[2mat \u001b[22mnode_modules/emittery/index.js\u001b[2m:363:13\u001b[22m\n          at Array.map (<anonymous>)\n      \u001b[2mat Emittery.emit (\u001b[22mnode_modules/emittery/index.js\u001b[2m:361:23)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\src\\__tests__\\fileMock.js","startTime":1756661898251,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1756661898251,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    Vitest cannot be imported in a CommonJS module using require(). Please use \"import\" instead.\n\n    If you are using \"import\" in your source code, then it's possible it was bundled into require() automatically by your bundler. In that case, do not bundle CommonJS output since it will never work with Vitest, or use dynamic import() which is available in all CommonJS modules.\n\n    \u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mimport\u001b[39m { sanitizeWP } \u001b[36mfrom\u001b[39m \u001b[32m'../src/lib/sanitize'\u001b[39m\n     \u001b[90m 4 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 5 |\u001b[39m describe(\u001b[32m'sanitizeWP'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m   |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 6 |\u001b[39m   it(\u001b[32m'removes script tags and preserves safe content'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 7 |\u001b[39m     \u001b[36mconst\u001b[39m dirty \u001b[33m=\u001b[39m \u001b[32m`<p>Hello <strong>world</strong></p><script>alert(1)</script><a href=\"http://example.com\">link</a>`\u001b[39m\n     \u001b[90m 8 |\u001b[39m     \u001b[36mconst\u001b[39m clean \u001b[33m=\u001b[39m sanitizeWP(dirty)\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22mnode_modules/vitest/index.cjs\u001b[2m:1:109)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mtest/sanitize.test.ts\u001b[39m\u001b[0m\u001b[2m:5:17)\u001b[22m\n","name":"E:\\VSCode_Repo\\tech-oblivion-wpHeadless\\test\\sanitize.test.ts","startTime":1756661898251,"status":"failed","summary":""}],"wasInterrupted":false}
