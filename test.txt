
> nextn@0.1.0 test
> jest --passWithNoTests --runInBand src/__tests__/permissions.test.ts

views calc is wronng its reading +5 views on each reload thats not right ...toc is not rendering for new posts.. either theyve been pushed from editor {next fe} or wp backend... same goes for more from author component.. if the web app is live and posts are getting published how it'll manage.. look for such kind of issues in app where this can app.. if app is published and deployed.

make the dynamic caching if posts are published cache them right away.. 

remvoe this selector from public UI [ref img] 
GET /api/auth/me 200 in 414ms
Posts API: Converted author param to array format
 GET /api/auth/me 200 in 1437ms
 POST /api/analytics/page-view 200 in 1688ms
 GET /api/wp/posts?author=1&per_page=3&orderby=meta_value_num&meta_key=views&order=desc&exclude=4861 200 in 2181ms
 POST /api/analytics/page-view 200 in 1446ms
 POST /api/analytics/page-view 200 in 1578ms
 GET /api/wp/users/ajay 200 in 903ms
 GET /api/wp/related?categories=162%2C140&tags=37%2C42%2C23&exclude=4861&per_page=4 200 in 800ms
Error: Route "/blog/[slug]" used `searchParams.floatImage`. `searchParams` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PostPage (app\blog\[slug]\page.tsx:232:31)
  230 |     // Note: removed recent posts from sidebar as per user request
  231 |
> 232 |     const floatImage = typeof searchParams?.floatImage === 'string'
      |                               ^
  233 |         ? ['1','true','yes','on'].includes(String(searchParams?.floatImage).toLowerCase())
  234 |         : false
  235 |
 GET /blog/npm-supply-chain-attacks-secure-your-javascript 200 in 4288ms
 │ GET http://localhost:3200/api/wp/related?categories=162%2C140&tags=37%2C42%2C23&exclude=4861&per_page=4
 │ │ ⚠ Specified "cache: no-store" and "revalidate: 300", only one should be specified.
 ✓ Compiled /api/wp/popular in 117ms
=== COMMENTS API DEBUG START ===
WP_USER value: "Dr. Ajay Chaturvedi"
WP_USER split test: [ 'Dr.', 'Ajay', 'Chaturvedi' ]
WP_APP_PASSWORD length: 29
WP_USER exists: true
WP_APP_PASSWORD exists: true
Request URL: http://localhost:3200/api/wp/comments?post=4861&per_page=10&page=1&order=desc&orderby=date
Force Basic Auth requested: false
=== COMMENTS API DEBUG START ===
WP_USER value: "Dr. Ajay Chaturvedi"
WP_USER split test: [ 'Dr.', 'Ajay', 'Chaturvedi' ]
WP_APP_PASSWORD length: 29
WP_USER exists: true
WP_APP_PASSWORD exists: true
Request URL: http://localhost:3200/api/wp/comments?post=4861&per_page=10&page=1&order=desc&orderby=date
Force Basic Auth requested: false
Session wpToken found: true
Comments API: post parameter received: 4861
Comments API: author parameter received: null
Comments API: admin request detected: false
Comments API: full search params: post=4861&per_page=10&page=1&order=desc&orderby=date
=== TRYING MU PROXY ===
Comments API: Using proxy with URL: https://techoblivion.in/wp-json/fe-auth/v1/proxy?path=wp%2Fv2%2Fcomments&query%5Bpost%5D=4861&query%5Bper_page%5D=10&query%5Bpage%5D=1&query%5Border%5D=desc&query%5Borderby%5D=date
Session wpToken found: true
Comments API: post parameter received: 4861
Comments API: author parameter received: null
Comments API: admin request detected: false
Comments API: full search params: post=4861&per_page=10&page=1&order=desc&orderby=date
=== TRYING MU PROXY ===
Comments API: Using proxy with URL: https://techoblivion.in/wp-json/fe-auth/v1/proxy?path=wp%2Fv2%2Fcomments&query%5Bpost%5D=4861&query%5Bper_page%5D=10&query%5Bpage%5D=1&query%5Border%5D=desc&query%5Borderby%5D=date
 POST /api/wp/track-view 200 in 1588ms
 GET /api/wp/bookmarks?postId=4861 200 in 1944ms
 GET /api/wp/related?categories=162%2C140&tags=37%2C42%2C23&exclude=4861&per_page=5 200 in 2117ms
 POST /api/wp/track-view 200 in 2137ms
 GET /api/wp/related?categories=162%2C140&tags=37%2C42%2C23&exclude=4861&per_page=5 200 in 338ms
Comments API: Proxy response length: 6371
Comments API: Proxy returned 7 comments
Comments API: Post IDs in proxy response: [ 4715, 4798, 4490, 184, 184 ]
 GET /api/wp/comments?post=4861&per_page=10&page=1&order=desc&orderby=date 200 in 2389ms
 GET /api/wp/bookmarks?postId=4861 200 in 997ms
 GET /api/wp/popular?limit=4 200 in 2798ms
Comments API: Proxy response length: 6371
Comments API: Proxy returned 7 comments
Comments API: Post IDs in proxy response: [ 4715, 4798, 4490, 184, 184 ]
 GET /api/wp/comments?post=4861&per_page=10&page=1&order=desc&orderby=date 200 in 2838ms



 Fix view count logic, TOC/related components, dynamic caching for live publishing, and UI cleanup

Context
The blog app (Next.js + WP backend) shows multiple functional issues when deployed live:

View counter increments incorrectly (+5 per reload).

Table of Contents (TOC) does not render for newly published posts (whether pushed from Next.js editor or WP backend).

“More from Author” component fails for new posts.

Live publishing workflow not handled → cache not refreshed immediately when new posts go live.

Admin selector still visible in public UI. [ref image]

We need to fix these issues holistically and ensure the app behaves correctly under live conditions.

Issues & Fixes
1. Views Calculation

Bug: Each reload adds +5 views (likely multiple /api/analytics/page-view calls firing).

Fix:

Deduplicate page-view calls (only once per mount).

Server should increment views by 1 per unique session (or debounce within X seconds).

Implement IP/session-based guard or token to avoid inflation.

2. TOC Not Rendering for New Posts

Bug: Newly published posts lack TOC (editor → WP push or backend publish). Likely because TOC generation runs at build time only.

Fix:

Generate TOC on-demand during SSR/ISR when post is first requested.

Ensure TOC parser runs regardless of publish source.

Add fallback for client-side hydration: if post body loads but no TOC exists, re-run parser.

3. “More from Author” Component

Bug: Breaks for newly published posts (likely no cached relationship or missing author data).

Fix:

Fetch author posts dynamically with fallback if cache miss.

Ensure author info + posts are available at first render, even for new authors.

Use revalidate=60 or on-demand cache invalidation on publish webhook.

4. Dynamic Caching & Live Publishing

Problem: If app is live and new posts are published, cache must refresh instantly.

Fix:

Implement on-demand revalidation via Next.js revalidatePath or revalidateTag on WP publish/update webhook.

Posts should cache immediately after publishing.

Related components (TOC, more from author, popular posts) must revalidate alongside post.

5. Remove Unwanted Selector from Public UI

Bug: Extra selector visible in public UI (per screenshot).

Fix: Remove the selector component entirely from frontend render. Confirm no leakage in source HTML.

Acceptance Criteria

Views increment by 1 per unique page load, not multiple times. No duplicate analytics calls.

Newly published posts render with TOC on first load (no manual rebuild required).

“More from Author” works for all posts, including newly published ones.

Dynamic caching in place: WP publish/update webhook triggers Next.js revalidation instantly.

Public UI does not display the unwanted selector.

Logs confirm reduced duplicate calls (no +5 view increments).

Page load behavior verified in live environment with new content.

QA Checklist

 Reload blog post multiple times → views increment correctly (+1, not +5).

 Publish a post from WP backend → TOC renders on first load.

 Publish a post from Next.js editor → TOC + “More from Author” render correctly.

 Publish a new post with a new author → “More from Author” shows at least 1 result.

 Check caching headers → posts use on-demand revalidation, not stale cache.

 Verify selector no longer visible on frontend.

 Test production deploy: no duplicate API calls in logs.